@page "/"
@inject NavigationManager NavigationManager

@if (_tournamentTimer != null)
{
    <style>@_tournamentTimer.Style</style>
}
else
{
    <style>@StyleSheet.Default</style>
}
@if (_isConnectionLost)
{
    <div class="disconnected">Disconnected <span class="emoji">🔌</span></div>
}
@if (_showingResults)
{
    <iframe width="80%" height="80%" src="http://localhost:55607/0/projector0.html"></iframe>
}
else
{
    <div class="main">

        @if (_tournamentTimer != null)
        {
            <div class="timer-name">@_tournamentTimer.TimerName</div>
        }
        <div class="clock">


            @if (_tournamentTimer != null && _showingMessage && _tournamentTimer.TimerMessage != null && _tournamentTimer.TimerMessage.ShowFullScreen)
            {
                <p>@_tournamentTimer.TimerMessage.Text</p>
            }
            else
            {
                <div class="clock-time @_blinking">@_clockValue</div>
                @if (_tournamentTimer != null)
                {
                    if (_showingMessage && _tournamentTimer.TimerMessage != null)
                    {
                        <div class="clock-label">@_tournamentTimer.TimerMessage.Text</div>
                    }
                    else if (_tournamentTimer.IsBreak && !string.IsNullOrWhiteSpace(_tournamentTimer.BreakText))
                    {
                        <div class="clock-label">@_tournamentTimer.BreakText</div>
                    }
                    else if (_tournamentTimer.Finished)
                    {
                        <div class="clock-label">Finished</div>
                    }
                }
            }

        </div>
        <div class="bottom">
            <div class="current-time">@_currentTimeValue</div>
            @if (!string.IsNullOrWhiteSpace(_tournamentTimer?.ResultsUrl))
            {
                <div class="results">@_tournamentTimer.ResultsUrl</div>
            }
            @* ReSharper disable once HeapView.BoxingAllocation *@
            @if (_tournamentTimer != null)
            {
                <div class="round">@((_tournamentTimer.CurrentRoundId + 1).ToString())/@_tournamentTimer.NumberOfRounds.ToString()</div>
            }
        </div>
    </div>
}


@code{
    private readonly Timer _refreshTimer = new Timer(1000);
    private readonly Timer _framesTimer = new Timer(200);
    private bool _isConnectionLost;
    private string _currentTimeValue = string.Empty;
    private bool _showingMessage;
    private TimerMessage _currentOrLastMessage;
    private DateTime _showingMessageTarget;
    private int _connectionErrors = 0;
    private TournamentTimer _tournamentTimer;
    private readonly DataContractSerializer _serializer = new DataContractSerializer(typeof(TournamentTimer));
    private string _clockValue = "00:00";
    private readonly HttpClient _httpClient = new HttpClient();
    private string _blinking = "";
    private bool _showingResults = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _refreshTimer.Elapsed += RefreshData;
        try
        {
            var timerDataStream =
                await _httpClient.GetStreamAsync(NavigationManager.BaseUri + "./timer.xml");
            _tournamentTimer = _serializer.ReadObject(timerDataStream) as TournamentTimer;
        }
        catch
        {
            _clockValue = "Please Refresh Webpage";
        }
        _refreshTimer.Start();
        _framesTimer.Elapsed += UpdateUi;
        _framesTimer.Start();
    }

    private async void RefreshData(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            using var httpClient = new HttpClient();
            var timerDataStream =
                await httpClient.GetStreamAsync(NavigationManager.BaseUri + "/timer.xml?=" + DateTime.Now);
            var tmpTimer = _serializer.ReadObject(timerDataStream) as TournamentTimer;
            if (!_tournamentTimer.Equals(tmpTimer) && tmpTimer != null && !(tmpTimer.Target < DateTime.Now && !tmpTimer.Overtime))
            {
                _tournamentTimer = tmpTimer;
            }
            if (_tournamentTimer.TimerMessage != null && !_tournamentTimer.TimerMessage.Equals(_currentOrLastMessage) &&
                _tournamentTimer.TimerMessage.Expiration.Subtract(DateTime.Now).CompareTo(new TimeSpan(0, 0, 0)) > 0)
            {
                _currentOrLastMessage = _tournamentTimer.TimerMessage;
                _showingMessage = true;
                _showingMessageTarget = DateTime.Now.Add(_tournamentTimer.TimerMessage.Duration);
            }


            if (_connectionErrors != 0)
            {
                _connectionErrors = 0;
                _refreshTimer.Interval = 1000;
            }
        }
        catch (Exception e)
        {
            if (e.Message == "TypeError: Failed to fetch")
            {
                _connectionErrors++;
                _refreshTimer.Interval = Math.Min(10000, (_connectionErrors + 1) * 1000);
            }
        }
        _isConnectionLost = DateTime.Now - _tournamentTimer.SerializationTimeStamp > new TimeSpan(0, 2, 0);
        StateHasChanged();
    }

    private void UpdateUi(object sender, EventArgs e)
    {
        if (_tournamentTimer.Finished)
        {
            _clockValue = DateTime.Now.ToString(@"HH\:mm");
        }
        else
        {
            if (_tournamentTimer.Running)
            {
                var time = _tournamentTimer.Target - DateTime.Now;
                var prefix = time >= new TimeSpan(0) || !_tournamentTimer.Overtime ? "" : "-";
                _clockValue = time.Hours == 0 ? prefix + time.ToString(@"mm\:ss") : prefix + time.ToString(@"hh\:mm\:ss");
            }
            else
            {
                var time = _tournamentTimer.Target.Subtract(_tournamentTimer.PausedAtTime);
                var prefix = time >= new TimeSpan(0) || !_tournamentTimer.Overtime ? "" : "-";
                _clockValue = time.Hours == 0 ? prefix + time.ToString(@"mm\:ss") : prefix + time.ToString(@"hh\:mm\:ss");
            }
            _blinking = DateTime.Now + _tournamentTimer.BlinkingDuration > _tournamentTimer.Target && !_tournamentTimer.IsBreak && !_tournamentTimer.Finished ? "is-blinking" : "";
        }
        _currentTimeValue = DateTime.Now.ToString(@"HH\:mm");
        if (_showingMessageTarget.Subtract(DateTime.Now).CompareTo(new TimeSpan(0, 0, 0)) < 0)
        {
            _showingMessage = false;
        }
        StateHasChanged();
    }

}