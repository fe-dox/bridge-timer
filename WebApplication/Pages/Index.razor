@page "/"
@inject NavigationManager NavigationManager

<div class="main">
    <div class="clock">
        @_clockValue
    </div>
    @if (_tournamentTimer != null)
    {
        <div class="round">@_tournamentTimer.CurrentRound.ToString() / @_tournamentTimer.NumberOfRounds.ToString()</div>
        @if (!string.IsNullOrEmpty(_tournamentTimer.ResultsUrl))
        {
            <div class="results">@_tournamentTimer.ResultsUrl</div>
        }
    }
</div>


@code{
    private readonly Timer _refreshTimer = new Timer(1000);
    private TournamentTimer _tournamentTimer;
    private readonly DataContractSerializer _serializer = new DataContractSerializer(typeof(TournamentTimer));
    private string _clockValue = "00:00:00";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _refreshTimer.Elapsed += RefreshData;
        using var httpClient = new HttpClient();
        var timerDataStream =
            await httpClient.GetStreamAsync(NavigationManager.BaseUri + "./timer.xml");
        _tournamentTimer = _serializer.ReadObject(timerDataStream) as TournamentTimer;
        _refreshTimer.Start();
        await RefreshData();
    }

    private async void RefreshData(object sender, ElapsedEventArgs elapsedEventArgs)
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            using var httpClient = new HttpClient();
            var timerDataStream =
                await httpClient.GetStreamAsync(NavigationManager.BaseUri + "/timer.xml");
            var tmpTimer = _serializer.ReadObject(timerDataStream) as TournamentTimer;
            if (!_tournamentTimer.Equals(tmpTimer) && tmpTimer != null)
            {
                _tournamentTimer = tmpTimer;
                _tournamentTimer.Tick += UpdateUi;
            }
            if (!_tournamentTimer.Running && !_tournamentTimer.Finished)
            {
                _clockValue = _tournamentTimer.Target.Subtract(_tournamentTimer.PausedAtTime).ToString(@"hh\:mm\:ss");
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        StateHasChanged();
    }

    private void UpdateUi(object sender, DateTime target)
    {
        Console.WriteLine("Updating UI");
        _clockValue = target.Subtract(DateTime.Now).ToString(@"hh\:mm\:ss");
        StateHasChanged();
    }

}